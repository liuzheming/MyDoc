#### 堆分析，核心是寻找吃内存的业务对象：(工具：直方图、堆转储)


1. 堆直方图，寻找占用内存较多的数据类型
2. 堆转储文件，MAT
    1. 看保留内存大小（深内存、浅内存）
    2. 追溯对象的引用，判断对象的来源
3. 内存溢出
    1. 原生内存不足（OOM: unable to create new native thread ）
    2. 永久代或元空间不足（OOM: metaspace/ permGen space）
    3. 堆内存不足（OOM: Java heap space）
    4. 达到GC的开销限制（OOM: GC overhead limit exceeded）


#### 减小内存使用

1. 减小对象大小
2. 延迟对象初始化，想想懒加载单例模式
3. 不可变对象和标准化对象
4. 字符串的保留



#### 对象生命周期管理

1. 对象重用(池化技术、线程本地变量)
2. 弱引用、软引用与其他引用


